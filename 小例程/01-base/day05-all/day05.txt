回顾:
1.循环:反复执行一段相同或相似的代码
2.循环三要素:
  1)循环变量的初始化
  2)循环的条件(以循环变量为基础)
  3)循环变量的改变(向着循环的结束变)
  循环变量:在循环过程中所反复改变的那个量
3.循环结构:
  1)while:先判断后执行，有可能一次都不执行
  2)do...while:先执行后判断，至少执行一次
               要素1与要素3相同时，首选do...while
  3)for:固定次数循环



笔记:
1.三种循环结构的更佳适用情况:
  1)while:"当..."循环
  2)do...while:"直到..."循环
               要素1与要素3相同时首选do...while
  3)for:固定次数循环
2.嵌套循环:
  1)循环中套循环，常常多行多列时使用，
    一般外层控制行，内层控制列
  2)执行规则:外层走一次，内层走所有次
  3)建议:循环层次越少越好，若超3层才能实现，说明设计有问题
  4)break只能跳出一层循环
3.程序=算法+数据结构
  1)算法:解决问题的流程/步骤(顺序、分支、循环)
  2)数据结构:将数据按照某种特定的结构来保存
             数怎么存
    设计合理的/良好的数据结构会导致好的算法
4.数组:
  1)相同数据类型元素的集合
  2)是一种数据类型(引用类型)
  3)数组的定义:
      int[] arr = new int[10];
  4)数组的初始化:
      int[] arr = new int[4]; //0,0,0,0
	  int[] arr = {1,3,5,7}; //1,3,5,7
      int[] arr = new int[]{1,3,5,7}; //1,3,5,7
	  int[] arr;
	  arr = {1,3,5,7}; //编译错误
	  arr = new int[]{1,3,5,7}; //正确
  5)数组的访问:
    5.1)通过(数组名.length)可以获取数组的长度
	      int[] arr = new int[6];
          System.out.println(arr.length); //6
	5.2)通过下标/索引来访问数组中的元素
	    下标从0开始，最大到(数组的长度-1)
		  int[] arr = new int[3];
		  arr[0] = 100; //给arr中第1个元素赋值为100
		  arr[1] = 200; //给arr中第2个元素赋值为200
		  arr[2] = 300; //给arr中第3个元素赋值为300
          arr[3] = 400; //数组下标越界异常
		  System.out.println(arr[arr.length-1]); //输出arr中最后一个元素的值
  6)数组的遍历:
      int[] arr = new int[10];
	  for(int i=0;i<arr.length;i++){
	    arr[i] = 100;
	  }
	  for(int i=0;i<arr.length;i++){ //正序
	    System.out.println(arr[i]);
	  }
	  for(int i=arr.length-1;i>=0;i--){ //倒序
	    System.out.println(arr[i]);
	  }
  7)数组的复制:
    7.1)System.arraycopy(a,1,a1,0,4); //灵活度好，效率高
	7.2)int[] a1 = Arrays.copyOf(a,6); //灵活度差，效率低
	    a = Arrays.copyOf(a,a.length+1); //扩容
		a = Arrays.copyOf(a,a.length-1); //缩容
  8)数组的排序:
    8.1)Arrays.sort(arr); //升序
	8.2)冒泡排序算法:
	    8.2.1)四个数冒三轮
		8.2.2)每一轮都从第1个元素开始冒，
		      每一次都是和它的下一个元素比
		8.2.3)冒出来的就不带它玩了


练习:-----------至少写两次
1.九九乘法表
2.求数组最大值并将其放在最后一个元素的下一位置
3.冒泡排序












for(int i=0;i<arr.length-1;i++){ //轮数
  for(int j=0;j<arr.length-1-i;j++){ //次数
    if(arr[j]>arr[j+1]){
	  int t = arr[j];
	  arr[j] = arr[j+1];
	  arr[j+1] = t;
	}
  }
}





    arr.length-1-i
i=0 比3次
i=1 比2次
i=2 比1次


int[] arr = {78,23,45,1}; //升序

第一轮:
  78和23比，换，23,78,45,1
  78和45比，换，23,45,78,1
  78和1比，换，23,45,1,78-----------78冒出来了
第二轮:
  23和45比，不换
  45和1比，换，23,1,45,78-----------45冒出来了
第三轮:
  23和1比，换，1,23,45,78-----------23冒出来了













排序算法有很多种:
  插入排序、冒泡排序、快速排序...

元素数少，用哪种排序方式排序，效率都一样
元素数多，不同的排序方式，最终的效率就不一样了

不同的数据，用不同的排序方式，效率也是不同的
交换次数越少，则效率越高


这30万个数据------------插入排序最快
另30万个数据------------冒泡排序最快
另30万个数据------------快速排序最快



long a = System.currentTimeMillis();
复杂业务操作
long b = System.currentTimeMillis();

System.out.println(b-a); //3


Arrays.sort(arr); //升序










项目的优化





项目-------------给用户











int[] a = {10,20,30,40,50};
int[] b = new int[6]; //0,0,0,0,0,0



for(int i=0;i<a.length;i++){
  b[i] = a[i];
}

b[0] = a[0];
b[1] = a[1];
b[2] = a[2];
b[3] = a[3];
b[4] = a[4];




















int[] arr = {34,56,78,23};
找最大值算法:
1)假设第1个元素为最大值
    int max = arr[0];
2)遍历剩余元素，将剩余元素与max对比，
  若剩余元素大于max，则修改max的值为较大的
    for(int i=1;i<arr.length;i++){
      if(arr[i]>max){
	    max=arr[i];
	  }
	}
max=34/56/78














0---------
'0'-------48



int[] arr = new int[100000];
for(int i=0;i<arr.length;i++){
  arr[i] = 100;
}

for(int i=0;i<arr.length;i++){
  System.out.println(arr[i]);
}



for(int i=arr.length-1;i>=0;i--){
  System.out.println(arr[i]);
}

System.out.println(arr[0]);
System.out.println(arr[1]);
System.out.println(arr[2]);
System.out.println(arr[3]);
System.out.println(arr[4]);
System.out.println(arr[5]);
System.out.println(arr[6]);
System.out.println(arr[7]);
System.out.println(arr[8]);
System.out.println(arr[9]);







arr[0] = 100;
arr[1] = 100;
arr[2] = 100;
arr[3] = 100;
arr[4] = 100;
arr[5] = 100;
arr[6] = 100;
arr[7] = 100;
arr[8] = 100;
arr[9] = 100;
















int[] arr = new int[3]; //0,0,0
arr[0]--------代表arr中的第1个元素
arr[1]--------代表arr中的第2个元素
arr[2]--------代表arr中的第3个元素







int a=0;
int b=0;
int c=0;
b=100;











//声明布尔型数组b，包含26个元素
//每个元素都是boolean型，默认值为false
boolean[] b = new boolean[26];











//声明浮点型数组d，包含20个元素
//每个元素都是double型，默认值为0.0
double[] d = new double[20];












//声明整型数组a，包含5个元素
//每个元素都是int类型，默认值为0
int[] a = new int[5]; //0,0,0,0,0













int   a; //声明整型变量a
int[] a; //声明整型数组变量a


double[] d;
char[] c;












将1万本书按照出版社分类存储--------设计数据结构
找java编程思想---------------------算法不简单


将1万本书按照图书类别分类存储------设计数据结构
找java编程思想---------------------算法简单











给一个题目，写出实现代码(考虑效率)








2年多-------------------3.5
3年-------------------3
5年-------------------2





差不多8年，高程
-------------------月薪3万




开发了10年，应聘高级程序员
-----------------------------月薪要2万








设计人员最值钱










在某种情况下，跳出多层循环的需求-------几乎没有



6000000
for(int i=1;i<=100;i++){
  for(int j=1;j<=200;j++){
    for(int k=1;k<=300;k++){
	  System.out.println(111);
	  break; //跳出k层
	}
  }
}





i=1
  j=1
    k走30次
  j=2
    k走30次
  ...
  j=20
    k走30次
  
  
  
  /2/3/.../19/20/21时结束
i=2
  j=1/2/3/.../19/20/21时结束
i=3
  j=1/2/3/.../19/20/21时结束
...
i=10
  j=1/2/3/.../19/20/21时结束















1*4=4   2*4=8   3*4=12  4*4=16
1*5=5   2*5=10  3*5=15  4*5=20  5*5=25


\t-----固定占8位







int i;
for(i=0;i<10;i++){
}
System.out.println(i); //10






int i = 0;
while(i<10){
  i++;
}
System.out.println(i); //10




















