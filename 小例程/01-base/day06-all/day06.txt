回顾:
1.适用情况:
2.嵌套循环:
    循环中套循环，外层走一次，内层走所有次
	层次越少越好，break只能跳出一层循环
3.数组:
    相同数据类型元素的集合，一种数据类型(引用类型)
    int[] arr = new int[10];
	int[] arr = {1,5,76};
	int[] arr = new int[]{1,5,76};
    arr[0] = 55;
	System.out.println(arr[arr.length-1]);
	for(int i=0;i<arr.length;i++){
	  arr[i] = 100;
	  System.out.println(arr[i]);
	}
	System.arraycopy(a,1,a1,0,4);
	int[] a1 = Arrays.copyOf(a,6);
	a = Arrays.copyOf(a,a.length+1);
	Arrays.sort(arr);
	4个数冒3轮，每轮都从第1个元素开始冒，
	每次都是和它下一个元素比，冒出来了不再参与





正课:
1.方法:
  1)用于封装一段特定的业务逻辑功能
  2)方法尽可能的独立，一个方法只干一件事
  3)一个方法可以被反复的调用多次
  4)减少代码重复，有利于代码的维护，有利于团队的协作
2.方法的定义:
    修饰词 返回值类型 方法名(参数列表){
	  方法体
	}
3.方法的调用:
  1)无返回值: 方法名(有参传参);
  2)有返回值: 数据类型 变量 = 方法名(有参传参);
4.return:
  1)return 值; //1.1)结束方法的执行 1.2)返回结果给调用方
  2)return;    //2.1)结束方法的执行



猜字符小游戏:
1.设计数据结构:变量
  1)char[] chs;   //随机字符数组
  2)char[] input; //用户输入的字符数组
  3)int[] result; //对比的结果
  4)int score;    //得分
    int count;    //猜错的次数
2.设计程序结构:方法
  1)主方法:
    public static void main(String[] args){
	  //...
	}
  2)生成随机字符数组:
    public static char[] generate(){
	  char[] chs = new char[5];
	  //...
	  return chs;
	}
  3)对比:随机字符数组与用户输入的字符数组
    public static int[] check(char[] chs,char[] input){
	  int[] result = new int[2];
	  //...
	  return result;
	}
  
3.设计算法:
    String str = "abc";
  1)将字符串转换为大写字母
    str = str.toUpperCase(); //ABC
	将字符串转换为小写字母
	str = str.toLowerCase(); //abc
  2)将字符串转换为字符数组
    char[] input = str.toCharArray();
  3)判断字符串内容是否相同
    if(str.equals("EXIT")){ //内容相同
	  
	}





练习:
  猜字符小游戏，要求:
  1)完成generate()方法
  2)完成check()方法
  3)完成main()方法










吃糖豆------------------讲语法
吃药--------------------讲项目










 








exit时退出

基本数据类型判断相等，用==
字符串类型判断内容相等，不能用==，得用equals









B:位置对个数为5









1)生成随机字符数组chs
2)猜吧!接收用户输入的字符数组input
3)对比chs与input，获取结果,
  3.1)猜对了，算分，break结束
  3.2)猜错了，给提示，返回第2步



int a = scan.nextInt();
double b = scan.nextDouble();
String str = scan.next(); "ABC"
char[] input = str.toCharArray();

input[0]='A'
input[1]='B'
input[2]='C'





Math.random()-----------0.0到0.99999999999...


//生成随机字符数组
public static char[] generate(){
  char[] chs = new char[5];
  
  char[] letters = {'A','B','C','D',...,'Y','Z'};
  boolean[] flags = new boolean[letters.length]; //开关数组
  for(int i=0;i<chs.length;i++){
    do{
	  int index = (int)(Math.random()*26); //0到25
	}while(flags[index]==true);
	chs[i] = letters[index];
    flags[index] = true;
  }
  i=0 index=0  chs[0]='A' flags[0]=true
  i=1 index=25 chs[1]='Z' flags[25]=true
  i=2 index=0/25/0/25/1 chs[2]='B' flags[1]=true
  i=3 index=0/1/25
  i=4









  i=0 index=0  chs[0]='A'
  i=1 index=25 chs[1]='Z'
  i=2 index=2  chs[2]='C'
  i=3
  i=4

  return chs;
}















位置对是在字符对的基础之上的

public static int[] check(char[] chs,char[] input){
  int[] result = new int[2]; //result[0]为位置对，result[1]为字符对

  for(int i=0;i<chs.length;i++){
    for(int j=0;j<input.length;j++){
	  if(chs[i]==input[j]){ //字符对
	    result[1]++; //字符对个数增1
        if(i==j){ //位置对
		  result[0]++; //位置对个数增1
		}
		break; //input剩余元素不再对比了
	  }
	}
  }
  i=0
    j=0 chs0-input0
	j=1 chs0-input1
	j=2 chs0-input2
	j=3 chs0-input3
	j=4 chs0-input4
  i=1
    j=0 chs1-input0
	j=1 chs1-input1
	j=2 chs1-input2
	j=3 chs1-input3
	j=4 chs1-input4
  
  return result;
}






String[] ps = {"大王","小王","黑桃2","红桃2",...};
boolean[] flags = new boolean[ps.length];







char c1,c2,c3,c4,c5;
char[] chs;












public static void main(String[] args){
  say();
  sayHi("zhangsan");
  int a = getNum(); 输出a
  double b = plus(5.0,6.6); 输出b
  double c=5.0,d=6.6; double e=plus(c,d); 输出e
}
public static void say(){}
public static void sayHi(String name){}
public static int getNum(){
  return 88;
}
public static double plus(double a,double b){
  return a+b;
}
















MethodDemo









方法可以有参，也可以无参
------------有参可以使方法更灵活



double d = Math.       sqrt(25);
int[] a1 = Arrays.     copyOf(a,6); 
System.out.            println("helloworld");
System.                arraycopy(a,1,a1,0,4);
Arrays.                sort(arr); //有参

int    a = scan.       nextInt();
double b = scan.       nextDouble();
double c = Math.       random();  //无参

  
double a = Math.sqrt(25);
double b = Math.random();

--------sqrt()想求谁的平方根就求谁的平方根
Math.sqrt(25);
Math.sqrt(125);
Math.sqrt(225);
Math.sqrt(81);
Math.sqrt(100);

--------random()只能得到0.0到0.9999...之内的随机数
Math.random();
Math.random();
Math.random();
Math.random();
Math.random();

假设random()有参
double a = Math.random(1,1000);
double b = Math.random(0,99);
double c = Math.random(25,45);









方法可以有返回值，也可以没有返回值:
1)无返回值----------返回值类型写成void
2)有返回值----------返回值类型写成具体的数据类型

方法执行完以后:
  若需要用到其中的某个数据-----有返回值
  不需要用到其中的某数据-------无返回值
 

int    a = scan.nextInt();
double b = scan.nextDouble();
double c = Math.random();
double d = Math.sqrt(25);
int[] a1 = Arrays.copyOf(a,6); //有返回值

System.out.println("helloworld");
System.arraycopy(a,1,a1,0,4);
Arrays.sort(arr);              //无返回值

















冒泡排序---------6个地方----调6次

冒泡排序(){
  6句话
}









a(){
  存
}
b(){
  取
}
c(){
  转
}

张三------调a(),b(),c()
李四------调b()
王五------调c()
赵六------调a(),c()










main(){
  调存款----1行
  调取款----1行
  调转帐----1行
}
存款(){
  500行-----------调验证密码()
}
取款(){
  500行-----------调验证密码()
}
转帐(){
  1000行----------调验证密码()
}
验证密码(){
}












100
  %2/3/4/5/.../98/99
  %2/3/4/5/.../49/50
  %2/3/4/5/.../9/10




8%2/3/4/5/6/7





100%51/52/53/54/.../98/99


100的平方根10
81的平方根9
25的平方根5
16的平方根4










boolean flag = false;
if(flag){
  
}












质数:又称素数，只能被1和它本身整除的数

何时是质数?---------取余所有都不得0
何时不是质数?-------取余只要有得0的

需要判断多次才能得结论------------开关

质数----------------用开关
不是质数------------不用开关
偶数还是奇数--------不用开关



5是质数
  5%2/3/4-----------------都不得0
7是质数
  7%2/3/4/5/6-------------都不得0
8不是质数
  8%2/3/4/5/6/7-----------有得0的
9不是质数
  9%2/3/4/5/6/7/8---------有得0的








