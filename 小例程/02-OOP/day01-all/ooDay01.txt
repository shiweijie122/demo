回顾:
1.方法:
  1)封装一段特定的逻辑功能
  2)尽可能独立，只干一件事
  3)可以被反复调用多次
  4)减少重复，有利于维护，有利于团队协作
2.方法的定义:
    修饰词 返回值类型 方法名(参数列表){
	  方法体
	}
3.方法的调用:
  1)无返回值: 方法名(有参传参);
  2)有返回值: 数据类型 变量 = 方法名(有参传参);
              方法名(有参传参);--------不建议
4.return:
  1)return;    //1.1)结束
  2)return 值; //2.1)结束 2.2)返回结果给调用方



笔记:
1.什么是类？什么是对象？
  1)现实世界是由很多很多对象组成的
    基于对象抽出了类
  2)对象:真实存在的单个的个体
    类:类型/类别，代表一类个体
  3)类中可以包含:
    3.1)所有对象所共有的属性/特征-------成员变量
	3.2)所有对象所共有的行为------------方法
  4)一个类可以包含多个对象
    同一类型的多个对象，结构相同，数据不同
  5)类是对象的模板，对象是类的具体的实例
2.如何创建类？如何创建对象？如何访问成员？
3.引用类型之间画等号:
  1)指向同一个对象
  2)对一个引用的修改会影响另一个引用
    eg:房子钥匙
  基本类型之间画等号:
  1)赋值
  2)对一个变量的修改不会影响另一个变量
    eg:身份证复印件
4.null:空，没有指向任何对象
       若引用的值为null，则该引用不能再进行任何操作了
	   若操作则NullPointerException空指针异常




练习:
1.完成Emp与EmpManager类
2.完成Cell类和CellTest类:---至少两次(oo.day02)
  1)Cell类，包含:
    1.1)成员变量:row,col
	1.2)方法:drop(),moveLeft(),getCellInfo()
  2)CellTest类，包含:
    2.1)main()方法:调用printWall()测试
    2.2)printWall(Cell cc)方法:打墙+打格












int a = null;
Cell c = null;



引用类型的默认值都是null







房子:对象
房子钥匙:引用
配一把钥匙:引用














数据类型  引用  指向   对象
Cell      c      =     new Cell();
c.row = 2;
c.col = 5;



int a = 5;










          引用
数据类型  引用类型变量  指向   对象
Student    zs            =    new Student();






    //基本类型变量(变量)
int  a;









new Student();











new Student();
new Student();

new Cell();
new Cell();
new Cell();











1)找对象:很多很多的小格子
2)抽类:格子类Cell
3)设计类中的成员变量和方法:
4)创建对象并测试

Cell
CellTest



class Cell{ //格子类
  int row; //行号
  int col; //列号
  void drop(){ //下落1格
    row++;
  }
  void moveLeft(int n){ //左移n格
    col-=n;
  }
  String getCellInfo(){ //获取格子行号和列号
    return row+","+col;
  }
}
















前四天的案例------俄罗斯方块项目





Student:
StudentTest:测试类



oo.day01
Student
StudentTest

所有引用类型的默认值都为null













类           对象
月饼模子     月饼








Student zs = new Student();
Student ls = new Student();
Student ww = new Student();
Student zl = new Student();





Student zs = new Student(); //创建了一个学生对象
zs.name = "zhangsan";
zs.age = 25;
zs.address = "河北廊坊";
zs.stuId = "001";
zs.eat();
zs.sleep();
zs.study();
zs.abc = 345; //编译错误

Student ls = new Student();
ls.name = "lisi";
ls.age = 26;
ls.address = "黑龙江佳木斯";
ls.stuId = "002";
ls.eat();
ls.sleep();
ls.study();



class Student{
  String name;
  int age;
  String address;
  String stuId;
  void eat(){}
  void sleep(){}
  void study(){}
}












class Teacher{
  String name;
  int age;
  String address;
  double salary;
  void eat(){}
  void sleep(){}
  void teach(){}
}



















class Dog{
  String type;
  String color;
  void 看家(){
  }
  void 叫(){
  }
}





class Car{
  String type;
  String color;
  double price;
  void run(){}
  void stop(){}
  void back(){}
}












对象               类
WKJ               老师
LQZ
XY

张三              学生
李四
王五

小花              狗
小黑
小强

马六              汽车
奥迪
奥拓







基本数据类型--------------只能装一个数据
数组----------------------必须相同数据类型
自己造数据类型------------想装什么就装什么




面向过程的结构化的弊端:
1)缺乏对数据的封装
2)数据与方法(操作数据的)的分离


1)数据的封装


class Emp{ //Emp就是我自己创造的一个数据类型
  String name;
  int age;
  double salary;
  void print(){
    System.out.println("姓名:"+name);
	System.out.println("年龄:"+age);
	System.out.println("工资:"+salary);
  }
}

class Test{
  public static void main(String[] args){
    Emp e = new Emp();
    e.name = "zhangsan";
	e.age = 25;
	e.salary = 5000;
	e.print();
  }
  
}













高质量的代码:
  复用性好、扩展性好、维护性好、
  可移植性好、健壮性好、可读性好...









全国各地项目
  抽了4个人--------------2个月时间做一套框架

福州夜间施工项目----------30万

我一个人每天花费大概1个小时，大概5天时间











OA--------------某和(卖给国企)
A公司------改
B公司------改
C公司------改

--------------------无从下手

.net做的，java实现的





产品:写完后可以让所有人都用
项目:只适应于一个人的









面向过程:
面向对象:
面向接口:












这几天都是晕乎乎的过来的-------------正常的
不晕不正常:
1)什么也不懂
2)自以为不晕------------很不错很不错







语言基础:固定
1)画一个圆形
2)去银行取钱
3)猜字符游戏

面向对象:因抽象而难
1)画一个图形
2)向着社会主义社会发展
3)射击游戏












面向对象(OO)
OOA:面向对象分析
OOD:面向对象设计
OOAD:面向对象分析与设计

OOP:面向对象编程-----------参与












请输入游戏等级(5、7、9):4
请输入游戏等级(5、7、9):6
请输入游戏等级(5、7、9):8
请输入游戏等级(5、7、9):3
请输入游戏等级(5、7、9):2
请输入游戏等级(5、7、9):7
ABCDEFG





public static int[] generateArray(int len,int max){
  int[] arr = new int[len];
  for(int i=0;i<arr.length;i++){
    arr[i] = (int)(Math.random()*max);
  }
  return arr;
}

generateArray(7,1000);





