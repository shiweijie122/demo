回顾:
1.内存管理:JVM
  1)堆:
  2)栈:
  3)方法区:
2.继承:
    代码的复用、extends
	父类:共有的 子类:特有的
	子继承父后，子具有:父+子
	单一继承、传递性
	构造子之前必须先构造父
3.super:指代当前对象的父类对象
   super.成员变量名
   super.方法名()
   super()
4.向上造型:
  1)父类型的引用指向子类的对象
  2)能点出来什么，看引用的类型



笔记:
1.方法的重写(Override):重新写、覆盖
  1)发生在父子类中，方法名称相同，参数列表相同，方法体不同
  2)重写方法被调用时，看对象的类型
2.重写与重载的区别:----常见面试题
  1)重写(Override):
    1.1)发生在父子类中，方法名称相同，参数列表相同，方法体不同
	1.2)遵循"运行期"绑定，看对象的类型调用方法
  2)重载(Overload):
    2.1)发生在同一类中，方法名称相同，参数列表不同，方法体不同
	2.2)遵循"编译期"绑定，看引用的类型绑定方法
3.package:
  1)作用:避免类的命名冲突
  2)包名可以有层次结构，类的全称: 包名.类名
  3)同包中的类不能同名
  4)建议:包名所有字母都小写
  import:
  1)同包中的类可以直接访问
    不同包中的类不能直接访问，若想访问:
	1.1)先import后再访问------建议
	1.2)类的全称--------------太繁琐，不建议
4.访问控制修饰符:
  1)public:公共的，任何类
  2)private:私有的，本类
  3)protected:受保护的，本类、子类、同包类
  4)默认的:什么也不写，本类、同包类
  类的访问控制修饰符只能是public或默认的
  类中的成员如上4种都可以
5.static:静态的
  1)静态变量:
    1.1)由static修饰的
	1.2)属于类的，存在方法区中，只有一份
	1.3)常常通过类名点来访问
	1.4)何时用:所有对象所共享的数据(图片、音频、视频等)
  2)静态方法:
    2.1)由static修饰的
	2.2)属于类的，存在方法区中，只有一份
	2.3)常常通过类名点来访问
	2.4)静态方法没有隐式的this传递，
	    静态方法中不能直接访问实例成员
	2.5)何时用:方法的操作仅与参数相关而与对象无关
  3)静态块:
    3.1)属于类的，在类被加载期间自动执行，
	    因为类只被加载一次，所以静态块也只执行一次
	3.2)何时用:初始化/加载静态资源(图片、音频、视频等)




练习:
1.练习StaticDemo
  1)静态变量
  2)静态方法
  3)静态块
2.练习OverrideOverloadDemo
  1)重载与重写的区别
3.练习OverrideDemo
  1)重写的注意事项(两同两小一大)

















class Cell{
  int row;
  int col;
  void drop(){
    row++;
  }
}

Cell c1 = new Cell(2,5);
c1.drop();

Cell c2 = new Cell(4,8);
c2.drop();









Arrays.sort(arr);
假设sort()不是静态的
无论a1,a2,a3,...,a100中的哪个对象
去sort(arr)，最终的结果都是一样的
结论:sort()的操作与对象无关，而仅与参数相关

Arrays a1 = new Arrays();
a1.sort(arr);

Arrays a2 = new Arrays();
a2.sort(arr);

Arrays a3 = new Arrays();
a3.sort(arr);













double a = Math.sqrt(25);
假设sqrt()不是静态的

无论m1,m2,m3,...,m100中的哪一个对象
去sqrt(25)，最终的结果都一样
结论:sqrt()方法与对象无关，而仅与参数有关

Math m1 = new Math();
double a = m1.sqrt(25); //5.0

Math m2 = new Math();
double b = m2.sqrt(25); //5.0

Math m3 = new Math();
double c = m3.sqrt(25); //5.0












Scanner scan = new Scanner(System.in);
int a = scan.nextInt();
double b = scan.nextDouble();

double c = Math.random();
double d = Math.sqrt(25);
Arrays.sort(arr);











实例方法多还是静态方法多




class Koo{
	int a; //对象点
	static int b; //类名点
	void show(){ //有this
		System.out.println(this.a);
		System.out.println(Koo.b);
	}
	static void test(){ //没有this
	    //静态方法没有隐式的this传递
		//没有this意味着没有对象
		//而实例成员必须得能过对象点来访问
		//静态方法中不能直接访问实例成员
		System.out.println(a);
		System.out.println(Koo.b);
	}
}














实例变量多

class Cell{
  int row;
  int col;
}










王者荣耀------------------地图.jpg
大王叫我来巡山------------dw.mp4
吸血鬼日记第六季第1集-----one.avi













成员变量:
1)实例变量:没有static修饰，
           属于对象，堆中，有几个对象有几份
2)静态变量:由static修饰，
           属于类，方法区中，一份


class Aoo{
  int a; //实例变量
  static int b; //静态变量
}
















oo.day04.vis















开卡的过程----------封装





数据私有化，行为公开化


class Card{
  private String cardId;
  private String cardPwd;
  private double balance;

  public boolean checkPwd(String pwd){
    if(cardPwd.equals(pwd)){
	  return true;
	}else{
	  return false;
	}
  }
  public boolean payMoney(double money){
    if(balance>=money){
	  balance-=money;
	  return true;
	}else{
	  return false;
	}
  }

  

}



















package java.util;
class Scanner{
  Scanner(in){
  }
  int nextInt(){
  }
  double nextDouble(){
  }
  String next(){
  }
}











package a;
class Aoo{
}
class Boo{
  Aoo o = new Aoo();
}

package b;
class Coo{
  Aoo o = new Aoo();
}















A公司:
  package a.b.c;
  class Aoo{
  }
B公司:
  package a.b.c;
  class Aoo{
  }


建议:
  域名反写    . 项目名称 . 模块名称 . 类名
  cn.tedu     . aproject
  cn.tedu     . bproject . stumanager   .
  cn.tedu     . bproject . teachmanager .



  com.taobao  . bproject
  com.baidu   . cproject
  com.jd


可移植性

A中的东西
拿到B中去







package a.b.c.d.e.f.g;
class Aoo{ //a.Aoo
}

package a.b.c.d.e.f.g;
class Aoo{ //b.Aoo
}













101,102,103,...
401,402,402,...
999,1000,1001,1002


楼+单元-----------------包


















编译期:.java到.class---只检查语法，不分配对象
运行期:jvm加载.class并运行.class---已分配对象









假设我继承了一个中餐馆
A.我还想继承做中餐------------不需要重写
B.我想改成做西餐--------------需要重写
C.我想在中餐之上加西餐--------重写(先super调父)












Student zs = new Student();
zs.name = "zhangsan";
zs.age = 25;
zs.address = "廊坊";
zs.stuId = "001";
zs.sayHi(); //zhangsan,25,廊坊,001

Teacher ls = new Teacher();
ls.name = "lisi";
ls.age = 26;
ls.address = "佳木斯";
ls.salary = 5000;
ls.sayHi(); //lisi,26,佳木斯,5000

Doctor ww = new Doctor();
ww.name = "wangwu";
ww.age = 27;
ww.address = "山东";
ww.level = "主治医师";
ww.sayHi(); //wangwu,27,山东



Student zs = new Student();
zs.sayHi(); //调Student的
Person ls = new Student(); //向上造型
ls.sayHi(); //调Student的



class Person{
  String name;
  int age;
  String address;
  void sayHi(){
    System.out.println(name+","+age+","+address);
  }
}
class Student extends Person{
  String stuId;
  void sayHi(){
    System.out.println(name+","+age+","+address+","+stuId);
  }
}
class Teacher extends Person{
  double salary;
  void sayHi(){
    System.out.println(name+","+age+","+address+","+salary);
  }
}
class Doctor extends Person{
  String level;
}















