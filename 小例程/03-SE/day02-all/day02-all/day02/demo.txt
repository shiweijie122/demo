String
StringBuilder
StringString
t1 t2 t3 t4 t5 t6 s1 s2 s3  
HelloWorld hello            
Jerry  Tom1_ 
S____g  S试试试试g

测试:

\w{5}\s
S\w{4}g 
S.{4}g
[ts]\d
[Hh]ello

什么是正则表达式?
1. 正则本身是一个字符串
2. 定义了检索匹配规则
3. 用于在目标文本上进行检索和匹配

正则语法:

1. 最简单的正则表达式就是基本的字符串
如:
	String  
	Hello
	
2. 字符集: 用于匹配合乎范围内的一个字符
如:
	[abc]
	[a-z]
	[0-9]
	[a-zA-Z]

3. 预定义字符集(缩写字符集)
如:
	. 任意字符
	\d 一位数字
	\w 一位单词字符
	\s 一位空白字符

4. 数量词
如:
	X{n} n个X
	X{n,m} n到m个X
	X{n,}  最少n个X
	
案例: 8到10个单词字符: \w{8,10}

5. 预定义数量词(缩写数量词)
如:
	? 0个或者1个
	* 0个或者多个
	+ 1个或者多个
		
6. 分组
如:

	(Hello|World) 分组中两个序列2选一

Hello World
Hello Kitty
World! 

7. 转义字符: 特殊符号必须使用转义字符

	\. 匹配 .
	\- 匹配 -
	\[ 匹配 [
	\] 匹配 ]
	\{ 匹配 {
	\\ 匹配 \
	\?
	\+
	\*
	...

8. 边界匹配
	^ 开始
	$ 结束

案例: 设计一个规则, 匹配一个手机号码

15601035818
+8615601035818
+86 15601035818
0086 15601035818
008615601035818

^(\+86|0086)?\s?\d{11}$
^((\+|00)86)?\s?\d{11}$
^((\+|00)86)?\s?[0-9]{11}$

案例: 写一个规则匹配.avi文件名

范老师.avi
tom.avi  
jerry.avi
andy.avi 
tom-jerry.avi

	.+\.avi		    任意字符包含中文
	\w+\.avi      只能单词字符
	[\w\-]+\.avi  包含-

案例: 匹配一个email

	^[a-zA-Z0-9_.-]+@([a-zA-Z0-9-]+\.)+[a-zA-Z0-9]{2,4}

案例: 匹配身份证号码?
	
21122119890604001x
211221198906040017

	^\d{17}[0-9Xx]$
	
邮政编码规则:
	
100098 
115000
12345678

	\d{6}
	
String str = "12345678";
boolean b = str.matches("\\d{6}");
//b = false
	

1, 范老师, 110, fan@tedu.cn
2, 小哲老师, 120, zhe@tedu.cn
3, 李洪鹤, 123, li@tedu.cn

str = "1, 范老师, 110, fan@tedu.cn"

String[] data=str.split(",\\s?")


String str="1|范老师|110|fan@tedu.cn";
str.split("\\|")


















